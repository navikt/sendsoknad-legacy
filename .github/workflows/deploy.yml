on:
  push:
    branches:
      - 'master'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment'
        required: true
        default: 'q0'

env:
  IMAGE: docker.pkg.github.com/${{ github.repository }}/sendsoknad:${{ github.sha }}
  IMAGE_MANIFEST: https://docker.pkg.github.com/v2/${{ github.repository }}/sendsoknad/manifests/${{ github.sha }}

jobs:
  check_docker_image_exists:
    name: Check if docker image exists in registry
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo "DOCKER_IMAGE_EXISTS_HTTP_STATUS=$(curl -X GET -s -o /dev/null -w "%{http_code}" ${{ env.IMAGE_MANIFEST }} -u ${{ github.actor }}:${{ secrets.GITHUB_TOKEN }})" >> $GITHUB_ENV
      - id: set_output
        run: |
          if [ ${{ env.DOCKER_IMAGE_EXISTS_HTTP_STATUS }} -eq 200 ]
          then
            echo "::set-output name=exists::true"
          else
            echo "::set-output name=exists::false"
          fi
    outputs:
      exists: ${{ steps.set_output.outputs.exists }}

  build:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Build
        run: |
          JAVA_HOME=/usr/local/openjdk-8
          mvn clean package -B -e -U
      - uses: actions/upload-artifact@v2
        with:
          name: sendsoknad
          path: |
            Dockerfile
            nais.yml
            app/target/sendsoknad.jar
          retention-days: 1

  docker:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: sendsoknad
      - name: GitHub Package Registry login
        run: |
          echo ${GITHUB_TOKEN} | docker login -u ${GITHUB_REPOSITORY} --password-stdin docker.pkg.github.com
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Docker build
        run: |
          docker build -t ${IMAGE} .
          docker push ${IMAGE}
  deploy:
    runs-on: ubuntu-latest
    needs: docker
    if: always() && (needs.docker.result == 'success' || needs.docker.result == 'skipped')
    steps:
      - uses: actions/checkout@v2
      - name: Deploy to prod
        if: github.event.inputs.environment == 'p'
        run: |
          echo "CLUSTER=prod-sbs" >> $GITHUB_ENV
          echo "NAMESPACE=default" >> $GITHUB_ENV
          echo "URL=sendsoknad.nais.adeo.no" >> $GITHUB_ENV
          echo "ENVIRONMENT=p" >> $GITHUB_ENV
      - name: Deploy to q1
        if: github.event.inputs.environment == 'q1'
        run: |
          echo "CLUSTER=dev-sbs" >> $GITHUB_ENV
          echo "NAMESPACE=default" >> $GITHUB_ENV
          echo "URL=sendsoknad.dev.adeo.no" >> $GITHUB_ENV
          echo "ENVIRONMENT=q1" >> $GITHUB_ENV
      - name: Deploy to q2
        if: github.event.inputs.environment == 'q2' || (github.event_name == 'push' && github.ref == 'refs/heads/master')
        run: |
          echo "CLUSTER=dev-sbs" >> $GITHUB_ENV
          echo "NAMESPACE=q2" >> $GITHUB_ENV
          echo "URL=sendsoknad-q2.dev.adeo.no" >> $GITHUB_ENV
          echo "ENVIRONMENT=q2" >> $GITHUB_ENV
      - uses: nais/deploy/actions/deploy@v1
        if: ${{ env.CLUSTER != '' }}
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: ${{ env.CLUSTER }}
          RESOURCE: nais.yml
          VAR: IMAGE=${{ env.IMAGE }},NAMESPACE=${{ env.NAMESPACE }},URL=${{ env.URL }}

      - name: Get commit message
        run: echo "COMMIT_MSG=$(git log --format=%s -n 1)" >> $GITHUB_ENV
      - name: Slack Notification
        if: ${{ env.CLUSTER != '' }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_COLOR: "${{ job.status == 'success' && 'good' || 'danger' }}"
          SLACK_USERNAME: Github Actions
          SLACK_ICON: https://github.com/github.png?size=48
          SLACK_TITLE: "sendsoknad ${{ job.status == 'success' && 'was deployed' || 'could not be deployed' }} to ${{ env.ENVIRONMENT }}"
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_MESSAGE: ${{ env.COMMIT_MSG }}
